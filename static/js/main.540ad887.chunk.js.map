{"version":3,"sources":["components/Grid.js","components/ColorPicker.js","App.js","index.js"],"names":["Grid","currentColor","cells","setCells","initGrid","updateCell","i","map","cell","cellIndex","color","className","style","background","onClick","ColorPicker","setCurrentColor","type","onChange","event","target","value","cellAmontList","initialCells","Array","from","length","pure","useState","setGrid","colorHistory","setColorHistory","onSetGrid","setCellAmount","capture","imageType","data","document","getElementsByClassName","html2canvas","then","canvas","image","toDataURL","saveAs","blob","fileName","elem","window","createElement","href","download","body","documentElement","appendChild","click","dispatchEvent","MouseEvent","view","bubbles","cancelable","URL","revokeObjectURL","remove","slice","concat","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.540ad887.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Grid =({currentColor, cells, setCells, initGrid})=>{\r\n    const updateCell = (i) => () => {\r\n        setCells(cells.map((cell, cellIndex) => {\r\n            if(cellIndex === i){\r\n                //set to currentColor\r\n                return {color: currentColor,}\r\n            }\r\n            return cell;\r\n        }))\r\n    };\r\n    return(\r\n        <div className={\"grid \" + initGrid}>\r\n            {cells.map((cell, i) => (\r\n                <div key={i} style={{background: cell.color}} className=\"cell\" onClick={updateCell(i)}></div>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Grid;","import React from \"react\";\r\n\r\nconst ColorPicker = ({currentColor, setCurrentColor}) => {\r\n    const colorChange = (event) =>{\r\n        setCurrentColor(event.target.value);\r\n    }\r\n\r\n    return (\r\n      <input className=\"colorPicker\" type=\"color\" onChange={colorChange} value={currentColor}/>\r\n    );\r\n};\r\n\r\nexport default ColorPicker;","import React, {useState} from \"react\";\r\nimport Grid from \"./components/Grid\";\r\nimport ColorPicker from \"./components/ColorPicker\";\r\nimport {pure} from \"recompose\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\n\r\nconst cellAmontList = [64,144,256,1024];\r\nlet  initialCells = Array.from({length:cellAmontList[0]}, () => ({\r\n    color: '#ffffff',\r\n}));\r\n\r\nfunction App() {\r\n  const [initGrid, setGrid] = useState(\"grid-8\");\r\n  const [cells, setCells] = useState(initialCells);\r\n  const [currentColor, setCurrentColor] = useState(\"#ff0000\");\r\n  const [colorHistory, setColorHistory] = useState([]);\r\n\r\n  const onSetColor = (color) => {\r\n    setColorHistory(colorHistory.slice(-7).concat(color));\r\n  };\r\n\r\n  const onSetGrid = (i, value) =>{\r\n    setGrid(value);\r\n    setCellAmount(i);\r\n    setCells(initialCells);\r\n  }\r\n\r\n  const setCellAmount = (i) =>{\r\n    initialCells=Array.from({length:cellAmontList[i]}, () => ({\r\n    color: '#ffffff',\r\n}));\r\n  }\r\n  \r\n  const capture = (imageType) => {\r\n    var data = document.getElementsByClassName('grid')[0];\r\n    html2canvas(data).then((canvas)=>{\r\n    var image = canvas.toDataURL('image/'+imageType, 1.0);\r\n    var fileName = 'sexported-vis.'+imageType\r\n    saveAs(image, fileName)\r\n    })\r\n  };\r\n  \r\n  const saveAs = (blob, fileName) =>{\r\n    var elem = window.document.createElement('a');\r\n    elem.href = blob;\r\n    elem.download = fileName;\r\n    elem.style = 'display:none;';\r\n    (document.body || document.documentElement).appendChild(elem);\r\n    if (typeof elem.click === 'function') {\r\n      elem.click();\r\n    }\r\n    else {\r\n      elem.target = '_blank';\r\n      elem.dispatchEvent(new MouseEvent('click', {\r\n        view: window,\r\n        bubbles: true,\r\n        cancelable: true\r\n      }));\r\n    }\r\n    \r\n    URL.revokeObjectURL(elem.href);\r\n    elem.remove();\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"container\">\r\n        <button className=\"btnGrid\" onClick={() => onSetGrid(0, \"grid-8\")}>8 X 8</button>\r\n        <button className=\"btnGrid\" onClick={() => onSetGrid(1, \"grid-12\")}>12 X 12</button>\r\n        <button className=\"btnGrid\" onClick={() => onSetGrid(2, \"grid-16\")}>16 X 16</button>\r\n        <button className=\"btnGrid\" onClick={() => onSetGrid(3, \"grid-32\")}>32 X 32</button>\r\n      </div>\r\n      <div className=\"pickerContainer\">\r\n        <ColorPicker currentColor={currentColor} setCurrentColor={setCurrentColor} />\r\n        <button className=\"addList\" onClick={() => onSetColor(currentColor)}>Add to List</button>\r\n      </div>\r\n      <div className=\"colorListContainer\">\r\n        {colorHistory.map((color,i) => (\r\n          <div key={i} className=\"colorList\" onClick={() => setCurrentColor(color)} style={{ background:color }}></div>\r\n          ))}\r\n      </div>\r\n          <Grid currentColor={currentColor} cells={cells} setCells={setCells} initGrid={initGrid} />\r\n        <div className=\"container\">\r\n          <button className=\"button1\" onClick={() => capture('jpg')}>Download as JPG</button>\r\n          <button className=\"button2\" onClick={() => capture('png')}>Download as PNG</button>\r\n          <button className=\"button3\" onClick={() => capture('gif')}>Download as GIF</button>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default pure(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}